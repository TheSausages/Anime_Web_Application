import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.openapitools.generator.gradle.plugin.tasks.MetaTask

plugins {
    id "org.openapi.generator" version "6.6.0"
}

version = "1.0.0"

dependencies {
    // Add lombok for use in generated classes
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    // These dependencies are used in the generated classes
    // As they are needed in other services, they are apis
    api "org.springframework.boot:spring-boot-starter-web:${springVersion}"
    api "org.springframework.boot:spring-boot-starter-validation:${springVersion}"
    api "org.springdoc:springdoc-openapi-ui:1.7.0"
    api "org.springframework.data:spring-data-commons:2.6.1"

    api "io.springfox:springfox-swagger2:3.0.0"
    api "io.springfox:springfox-swagger-ui:3.0.0"
    api 'org.openapitools:jackson-databind-nullable:0.2.2'

    api 'javax.validation:validation-api:2.0.1.Final'
    api 'javax.annotation:javax.annotation-api:1.3.2'
    api 'jakarta.validation:jakarta.validation-api:3.0.1'
    api 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    api 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
}

tasks.register("generateTypescriptMetaInformation", MetaTask) {
    generatorName = "typescript-fetch"
    packageName = "anime.app"
    outputFolder = "${getLayout().getBuildDirectory().get()}/meta/typescript"
}

tasks.register("generateJavaSpringMetaInformation", MetaTask) {
    generatorName = "spring"
    packageName = "anime.app"
    outputFolder = "${getLayout().getBuildDirectory().get()}/meta/java"
}

def yamlFileToGenerate = [
    // As models doesn't have any paths, there is no need to compile it
    User: "User-Service.yaml",
    Achievement: "Achievement-Service.yaml",
    Anime: "Anime-Service.yaml",
    Forum: "Forum-Service.yaml"
]
task generateTypescriptCode() {
    yamlFileToGenerate.each { yaml ->
        String typescriptFullTaskName = "generateTypescriptCode-${yaml.getKey()}"

        tasks.register(typescriptFullTaskName, GenerateTask) {
            generatorName = "typescript-fetch"

            validateSpec = true
            skipValidateSpec = false
            inputSpec = "${getLayout().getProjectDirectory()}/openapi/${yaml.getValue()}"
            templateDir = "${getLayout().getProjectDirectory()}/templates/typescript"

            outputDir = "${getLayout().getBuildDirectory().get()}/generated/typescript"
            apiPackage = "anime.app.api"
            invokerPackage = "anime.app.openapi.invoker"
            modelPackage = "anime.app.dto"
            configOptions = [
                'supportsES6': 'true',
                'withInterfaces': 'true'
            ]
        }

        spotlessTypescript.dependsOn(typescriptFullTaskName)
        spotlessTypescriptApply.dependsOn(typescriptFullTaskName)
        spotlessTypescriptCheck.dependsOn(typescriptFullTaskName, spotlessTypescriptApply)
    }

    finalizedBy(spotlessTypescriptApply)
}

task generateJavaSpringCode() {
    yamlFileToGenerate.each { yaml ->
        String javaFullTaskName = "generateJavaSpringCode-${yaml.getKey()}"

        tasks.register(javaFullTaskName, GenerateTask) {
            //Generator information
            generatorName = "spring"
            library = "spring-boot"

            //Spec Information
            validateSpec = true
            skipValidateSpec = false
            inputSpec = "${getLayout().getProjectDirectory()}/openapi/${yaml.getValue()}"
            templateDir = "${getLayout().getProjectDirectory()}/templates/java"

            //Generation and Output information
            outputDir = "${getLayout().getBuildDirectory().get()}/generated/java"
            apiPackage = "anime.app.api"
            invokerPackage = "anime.app.openapi.invoker"

            // Models must be in one package, because when they aren't cross-referencing them between different files generated many class files
            modelPackage = "anime.app.dto"
            configOptions = [
                'performBeanValidation':'true',
                'delegatePattern':'false',
                'dateLibrary': 'java8',
                'interfaceOnly': 'true',
                'generateSupportingFiles': 'true'
            ]

        }

        spotlessJava.dependsOn(javaFullTaskName)
        spotlessJavaApply.dependsOn(javaFullTaskName)
        spotlessJavaCheck.dependsOn(javaFullTaskName, spotlessJavaApply)
        compileJava.dependsOn(javaFullTaskName)
    }

    finalizedBy(spotlessJavaApply)
}

// Automatically add the generated java prettified classes as SourceSet, so gradle recognises them
// Typescript should not be added here as it will be used by Frontend
sourceSets {
    main {
        java.srcDirs += "${buildDir}/generated/java/src/main/java"
//        java.srcDirs += "${buildDir}/generated/typescript"
    }
}
